[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "socket-agent-client"
version = "0.2.0"
description = "Client library for interacting with socket-agent APIs"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Socket Agent Contributors"},
]
requires-python = ">=3.9"
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = [
    "socket-agent",
    "api",
    "client",
    "llm",
    "ai",
    "routing",
    "caching",
    "telemetry",
    "mcp",
    "openai",
    "langchain",
]

[project.urls]
Homepage = "https://github.com/systemshift/socket-agent"
Repository = "https://github.com/systemshift/socket-agent"
Issues = "https://github.com/systemshift/socket-agent/issues"

[project.optional-dependencies]
# Semantic caching with embeddings
semantic = [
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
]

# ML model support
ml = [
    "onnxruntime>=1.15.0",
    "numpy>=1.21.0",
]

# TensorFlow support (separate due to size)
tensorflow = [
    "tensorflow>=2.13.0",
    "numpy>=1.21.0",
]

# PyTorch support (separate due to size)
torch = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
]

# Template rendering
templates = [
    "jinja2>=3.1.0",
    "jmespath>=1.0.0",
]

# Framework adapters
adapters = [
    "langchain>=0.1.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# All optional features (except heavy ML frameworks)
all = [
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
    "onnxruntime>=1.15.0",
    "jinja2>=3.1.0",
    "jmespath>=1.0.0",
    "langchain>=0.1.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["socket_agent_client*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["socket_agent_client"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101"]
